zipcodes <- suppressWarnings(getNodeSet(root, "//zipcode"))
zipcodes[1]
zipcodes <- suppressWarnings(getNodeSet(root, "//zipcode"))
xmlSApply(zipcodes, xmlValue)
class(child)
dim(child)
class(child)
length(child)
child[1]
class(child[1])
zipcodes <- suppressWarnings(getNodeSet(root, "//zipcode"))
for (zip in zipcodes) {
print zip
zipcodes <- suppressWarnings(getNodeSet(root, "//zipcode"))
for (zip in zipcodes) {
print(zip)
}
zipcodes <- suppressWarnings(getNodeSet(root, "//zipcode"))
n = 0
z = "<zipcode>21231</zipcode>"
for (zip in zipcodes) {
if (z == zip) {
<zipcode>21231</zipcode>
zipcodes <- suppressWarnings(getNodeSet(root, "//zipcode"))
n = 0
z = "<zipcode>21231</zipcode>"
for (zip in zipcodes) {
if (z == zip) {
print("<zipcode>21231</zipcode>")
}
}
zipcodes <- suppressWarnings(getNodeSet(root, "//zipcode"))
n = 0
z = "<zipcode>21231</zipcode>"
for (zip in zipcodes) {
if (z == zip) {
print(class(zip))
#print("<zipcode>21231</zipcode>")
}
}
zipcodes <- suppressWarnings(getNodeSet(root, "//zipcode"))
n = 0
z = "<zipcode>21231</zipcode>"
for (zip in zipcodes) {
print(class(zip))
# if (z == zip) {
#   print(class(zip))
#   #print("<zipcode>21231</zipcode>")
# }
}
zipcodes <- suppressWarnings(getNodeSet(root, "//zipcode"))
n = 0
z = "<zipcode>21231</zipcode>"
for (zip in zipcodes) {
print(xmlName(zip))
print(class(zip))
break
# if (z == zip) {
#   print(class(zip))
#   #print("<zipcode>21231</zipcode>")
# }
}
n = 0
z = "<zipcode>21231</zipcode>"
for (zip in zipcodes) {
print(suppressWarnings(xmlName(zip)))
print(class(zip))
break
# if (z == zip) {
#   print(class(zip))
#   #print("<zipcode>21231</zipcode>")
# }
}
n = 0
z = "<zipcode>21231</zipcode>"
for (zip in zipcodes) {
print(suppressWarnings(xmlName(zip)))
print(suppressWarnings(xmlValue(zip)))
print(class(zip))
break
# if (z == zip) {
#   print(class(zip))
#   #print("<zipcode>21231</zipcode>")
# }
}
n = 0
z = "21231"
for (zip in zipcodes) {
print(suppressWarnings(xmlName(zip)))
print(suppressWarnings(xmlValue(zip)))
x = (suppressWarnings(xmlValue(zip)))
print(x)
print(class(zip))
break
# if (z == zip) {
#   print(class(zip))
#   #print("<zipcode>21231</zipcode>")
# }
}
n = 0
z = "21231"
for (zip in zipcodes) {
print(suppressWarnings(xmlName(zip)))
print(suppressWarnings(xmlValue(zip)))
x = (suppressWarnings(xmlValue(zip)))
print(x)
print(x == z)
print(class(zip))
break
# if (z == zip) {
#   print(class(zip))
#   #print("<zipcode>21231</zipcode>")
# }
}
n = 0
z = "21231"
for (zip in zipcodes) {
print(suppressWarnings(xmlName(zip)))
print(suppressWarnings(xmlValue(zip)))
x = (suppressWarnings(xmlValue(zip)))
print(x)
print(x == z)
print(class(zip))
if (x == z) n = n + 1
break
# if (z == zip) {
#   print(class(zip))
#   #print("<zipcode>21231</zipcode>")
# }
}
n
n = 0
z = "21231"
for (zip in zipcodes) {
print(suppressWarnings(xmlName(zip)))
print(suppressWarnings(xmlValue(zip)))
x = (suppressWarnings(xmlValue(zip)))
print(x)
print(x == z)
print(class(zip))
if (x == z) n = n + 1
}
n
n = 0
z = "21231"
for (zip in zipcodes) {
#print(suppressWarnings(xmlName(zip)))
#print(suppressWarnings(xmlValue(zip)))
x = (suppressWarnings(xmlValue(zip)))
#print(x)
#print(x == z)
#print(class(zip))
if (x == z) n = n + 1
}
n
system.time(x=5)
system.time(x=5; y=6; x+y)
x = 5
y = 6
system.time(x+y)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "acs2.csv", method = "curl")
list.files(".")
DT <- fread("xacs2.csv")
DT <- fread("acs2.csv")
library(data.table)
DT <- fread("acs2.csv")
class(DT)
head(DT)
DT$pwgtp15
print("Choice 1")
system.time(rowMeans(DT)[DT$SEX==1])
summary(DT)
DT[, c("SEX", "pwgtp15")]
DT <- DT[, c("SEX", "pwgtp15")]
summary(DT)
summary(DT)
structure(DT)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==2]
system.time(rowMeans(DT)[DT$SEX==1])
#rowMeans(DT)[DT$SEX==2]
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==2])
print("\nChoice 2")
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
print("\nChoice 3")
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
print("\nChoice 4")
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
print("\nChoice 5")
system.time(DT[,mean(pwgtp15),by=SEX])
print("\nChoice 6")
system.time(mean(DT$pwgtp15,by=DT$SEX))
tables()
library(data.table)
dt <- data.table(mtcars)
class(dt)
dt[, mean(mpg)] # can't do this with regular data frames
# equivalent with the data fram
tapply(mtcars$mpg, mtcars$am, mean)
dt[, mean(mpg), by=am]
dt[, mean(mpg), by=(am, cyl)]
dt[,mean(mpg),by=.(am,cyl)]
# with clearer lables
dt[, (avg=mean(mpg)), by=.(am, cyl)]
# How many rows
dt[, .N]
# How many cars in each cylinder grou
dt[, .N, by=cyl]
options(digits=4, warning = FALSE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),
user = "genome",
host = "genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(),
user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;")
dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(),
user = "genome", db = "hg19"
host = "genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19",
host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
ignorewarnings
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMiss <- fetch(query)
quantile(affyMis$misMatches)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMiss <- fetch(query)
quantile(affyMiss$misMatches)
affyMisSmall <- fetch(query, n=10)
dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
# These directions are out of date and direct me to https://bioconductor.org/install
# source("http://bioconductor.org/biocLite.R")
# biocLite("rhdf5")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if (!requireNamespace("rhdf5", quietly = TRUE))
install.packages("rhdf5")
BiocManager::install("rhdf5")
browseVignettes("rhdf5")
created = h5createGroup("example.h5", "foo")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h51s("example.h5")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1, 2.0, by=0.1), dim = c(5, 2, 2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L, seq(0, 1, length.out = 5),
c("ab", "cde", "fghi", "a", "s", stringsAsFactors = FALSE))
df = data.frame(1L:5L, seq(0, 1, length.out = 5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors = FALSE))
df = data.frame(1L:5L, seq(0, 1, length.out = 5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors = FALSE)
h5write(df, "example.h5", "df")
h5ls("example.h5")
df
readA = h5("example.h5", "foo/A")
readA = h5read("example.h5", "foo/A")
readB = h5read("example.h5", "foo/foobaa/B")
readdf = h5read("example.h5", "df")
readA
readB
readdf
h5write(c(12, 13, 14), "example.h5", "foo/A", index = list(1:3, 1))
h5read("example.h5", "foo/A")
library(rhdf5)
h5createFile("myhd5file.h5")
h5createGroup("myhdf5file.h5","foo")
options(digits=4, warning = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(rhdf5)
h5createFile("myhdf5file.h5")
h5createGroup("myhdf5file.h5","foo")
h5createGroup("myhdf5file.h5","baa")
h5createGroup("myhdf5file.h5","foo/foobaa")
h5ls("myhdf5file.h5")
# Write an matrix to the HDF5 file
A = matrix(1:10,nr=5,nc=2)
h5write(A, "myhdf5file.h5","foo/A")
# Create an array
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
# Add an attribute to the array
attr(B, "scale") <- "liter"
# Write the array to the HDF5 file
h5write(B, "myhdf5file.h5","foo/B")
# Create a matrix
C = matrix(paste(LETTERS[1:10],LETTERS[11:20], collapse=""),
nr=2,nc=5)
# Write the matrix to the HDF5 file
h5write(C, "myhdf5file.h5","foo/foobaa/C")
# Create a data frame
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
# Write the data frame to the file
h5write(df, "myhdf5file.h5","df")
# look at an overview of the file
h5ls("myhdf5file.h5")
D = h5read("myhdf5file.h5","foo/A")
E = h5read("myhdf5file.h5","foo/B")
F = h5read("myhdf5file.h5","foo/foobaa/C")
G = h5read("myhdf5file.h5","df")
h5f = H5Fopen("myhdf5file.h5")
h5f
d5f$df
d5f$df
h5f$df
h5f&'df'
# reads the whole dataset and then subsets
h5f$foo$foobaa$C
# only reads the matrix C
h5f$"/foo/foobaa/C"
h5d = h5f&"/foo/B"
h5d[]
h5d[3,,]
h5f$foo$B = 101:120
h5f$"/foo/B" = 101:120
H5Dclose(h5d)
H5Dclose(h5f)
H5Dclose(h5d)
h5closeAll()
fileUrl <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
con = url(fileUrl)
htmlCode = readLines(con)
close(con)
htmlCode
fileUrl <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
con = url(fileUrl)
htmlCode = readLines(con)
close(con)
htmlCode[1]
fileUrl <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
con = url(fileUrl)
htmlCode = readLines(con)
close(con)
htmlCode[1][1:10]
fileUrl <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
con = url(fileUrl)
htmlCode = readLines(con)
close(con)
class(htmlCode)
length(htmlCode)
htmlCode[5]
library(XML)
fileUrl <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
library(XML)
library(RCurl)
fileUrl <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
xData <- getURL(fileURL)
library(XML)
library(RCurl)
fileUrl <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
xData <- getURL(fileUrl)
html <- htmlTreeParse(url, useInternalNodes = T)
fileUrl <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
xData <- getURL(fileUrl)
xData
html <- htmlTreeParse(xData, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//span[@id='gsc_a_ca']", xmlValue)
xpathSApply(html, "//span[@class='gsc_a_ac gs_ibl']", xmlValue)
xpathSApply(html, "//a[@class='gsc_a_ac gs_ibl']", xmlValue)
library(httr)
html2 = GET(fileUrl)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText = TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
google = handle("http://google.com")
pg1 = GET(handle = google, path = "/")
pg2 = GET(handle = google, path = "search")
pg2
pg1
m = matrix(c(1, 2, 3, 4), ncol = 2)
ncol(m)
source("cachematrix.R")
setwd("~/Documents/Harvard/Prep/JHU_R/2. r_programming/ProgrammingAssignment2/ProgrammingAssignment2")
source("cachematrix.R")
## Test the function with the default empty matrix
x = makeCacheMatrix()
# get the empty matrix
x$get()
## Test the function with the default empty matrix
x = makeCacheMatrix()
source("cachematrix.R")
## Test the function with the default empty matrix
x = makeCacheMatrix()
# get the empty matrix
x$get()
# get the original inverse
x$get_inverse()
# set the inverse
X$set_inverse()
# set the inverse
x$set_inverse()
# get the original inverse
x$get_inverse()
# set the inverse (incorrect inverse but testing this function)
x$set_inverse(matrix(c(1, 2, 3, 4), nrow = 2))
# get that matrix
x$get_inverse()
# set a new matrix, expect error
x$set(c(1, 2, 3, 4))
is.matrix(c(1, 2))
source("cachematrix.R")
## Test the function with the default empty matrix
x = makeCacheMatrix()
# get the empty matrix
x$get()
# get the original inverse
x$get_inverse()
# set the inverse (incorrect inverse but testing this function)
x$set_inverse(matrix(c(1, 2, 3, 4), nrow = 2))
# get that matrix
x$get_inverse()
# set a new matrix, expect error
x$set(c(1, 2, 3, 4))
source("cachematrix.R")
## Test the function with the default empty matrix
x = makeCacheMatrix()
# get the empty matrix
x$get()
# get the original inverse
x$get_inverse()
# set the inverse (incorrect inverse but testing this function)
x$set_inverse(matrix(c(1, 2, 3, 4), nrow = 2))
# get that matrix
x$get_inverse()
# set a new matrix, expect error
x$set(c(1, 2, 3, 4))
source("cachematrix.R")
## Test the function with the default empty matrix
x = makeCacheMatrix()
# get the empty matrix
x$get()
# get the original inverse
x$get_inverse()
# set the inverse (incorrect inverse but testing this function)
x$set_inverse(matrix(c(1, 2, 3, 4), nrow = 2))
# get that matrix
x$get_inverse()
# set a new matrix, expect error
x$set(c(1, 2, 3, 4))
class(matrix)
str(matrix)
type(matrix)
install.packages("test_that")
install.packages("devtools")
# cacheMatrixTests
#
# http://mazamascience.com/WorkingWithData/?p=912
# install.packages("devtools)
library(devtools)
# cacheMatrixTests
#
# http://mazamascience.com/WorkingWithData/?p=912
# install.packages("devtools)
# library(devtools)
devtools::install_github("r-lib/testthat")
# cacheMatrixTests
#
# http://mazamascience.com/WorkingWithData/?p=912
# install.packages("devtools)
# library(devtools)
# devtools::install_github("r-lib/testthat")
library(testthat)
install.packages("rlang")
install.packages("rlang")
rlang
library(rlang)
# cacheMatrixTests
#
# http://mazamascience.com/WorkingWithData/?p=912
# install.packages("devtools)
# library(devtools)
# devtools::install_github("r-lib/testthat")
library(testthat)
remotes::install_github("r-lib/rlang")
